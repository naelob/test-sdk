/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
/**
 * @module ChaosHandler
 */
import type { RequestOption } from "@microsoft/kiota-abstractions";
import type { Middleware } from "./middleware";
import type { ChaosHandlerOptions } from "./options/chaosHandlerOptions";
/**
 * @class
 * Class
 * @implements Middleware
 * Class representing RedirectHandler
 */
export declare class ChaosHandler implements Middleware {
    /**
     * A member holding options to customize the handler behavior
     *
     * @private
     */
    options: ChaosHandlerOptions;
    /**
     * container for the manual map that has been written by the client
     *
     * @private
     */
    private manualMap;
    /** @inheritdoc */
    next: Middleware | undefined;
    /**
     * @public
     * @constructor
     * To create an instance of ChaosHandler
     * @param {ChaosHandlerOptions} [options = new ChaosHandlerOptions()] - The chaos handler options instance
     * @param manualMap - The Map passed by user containing url-statusCode info
     */
    constructor(options?: Partial<ChaosHandlerOptions>, manualMap?: Map<string, Map<string, number>>);
    /**
     * Fetches a random status code for the RANDOM mode from the predefined array
     * @private
     * @param {string} requestMethod - the API method for the request
     * @returns a random status code from a given set of status codes
     */
    private generateRandomStatusCode;
    /**
     * Strips out the host url and returns the relative url only
     * @private
     * @param {ChaosHandlerOptions} chaosHandlerOptions - The ChaosHandlerOptions object
     * @param {string} urlMethod - the complete URL
     * @returns the string as relative URL
     */
    private getRelativeURL;
    /**
     * Gets a status code from the options or a randomly generated status code
     * @param {ChaosHandlerOptions} chaosHandlerOptions - The ChaosHandlerOptions object
     * @param {string} requestURL - the URL for the request
     * @param {HttpMethod} requestMethod - the API method for the request
     * @returns {number} generated statusCode
     */
    private getStatusCode;
    /**
     * Generates a respondy for the chaoe response
     * @private
     * @param {ChaosHandlerOptions} chaosHandlerOptions - The ChaosHandlerOptions object
     * @param {string} requestID - request id
     * @param {string} requestDate - date of the request
     *  * @returns response body
     */
    private createResponseBody;
    /**
     * Composes a new chaotic response code with the configured parameters
     * @param {string} url
     * @param {FetchRequestInit} fetchRequestInit
     * @returns {Response}
     */
    private createChaosResponse;
    execute(url: string, requestInit: RequestInit, requestOptions?: Record<string, RequestOption> | undefined): Promise<Response>;
    static readonly chaosHandlerTriggeredEventKey = "com.microsoft.kiota.chaos_handler_triggered";
    private runChaos;
}
//# sourceMappingURL=chaosHandler.d.ts.map