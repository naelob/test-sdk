"use strict";
/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeadersInspectionHandler = void 0;
const tslib_1 = require("tslib");
const api_1 = require("@opentelemetry/api");
const observabilityOptions_1 = require("../observabilityOptions");
const headersInspectionOptions_1 = require("./options/headersInspectionOptions");
/**
 * @class
 * @implements Middleware
 * Inspects the headers of the request and response
 */
class HeadersInspectionHandler {
    /**
     * @constructor
     * @public
     * Creates new instance of HeadersInspectionHandler
     * @param {HeadersInspectionOptions} _options The options for inspecting the headers
     */
    constructor(_options = new headersInspectionOptions_1.HeadersInspectionOptions()) {
        this._options = _options;
    }
    execute(url, requestInit, requestOptions) {
        let currentOptions = this._options;
        if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions[headersInspectionOptions_1.HeadersInspectionOptionsKey]) {
            currentOptions = requestOptions[headersInspectionOptions_1.HeadersInspectionOptionsKey];
        }
        const obsOptions = (0, observabilityOptions_1.getObservabilityOptionsFromRequest)(requestOptions);
        if (obsOptions) {
            return api_1.trace.getTracer(obsOptions.getTracerInstrumentationName()).startActiveSpan("retryHandler - execute", (span) => {
                try {
                    span.setAttribute("com.microsoft.kiota.handler.headersInspection.enable", true);
                    return this.executeInternal(url, requestInit, requestOptions, currentOptions);
                }
                finally {
                    span.end();
                }
            });
        }
        return this.executeInternal(url, requestInit, requestOptions, currentOptions);
    }
    executeInternal(url, requestInit, requestOptions, currentOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.next) {
                throw new Error("next middleware is undefined.");
            }
            if (currentOptions.inspectRequestHeaders && requestInit.headers) {
                for (const [key, value] of requestInit.headers) {
                    currentOptions.getRequestHeaders().add(key, value);
                }
            }
            const response = yield this.next.execute(url, requestInit, requestOptions);
            if (currentOptions.inspectResponseHeaders && response.headers) {
                for (const [key, value] of response.headers.entries()) {
                    currentOptions.getResponseHeaders().add(key, value);
                }
            }
            return response;
        });
    }
}
exports.HeadersInspectionHandler = HeadersInspectionHandler;
