/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
import type { RequestOption } from "@microsoft/kiota-abstractions";
import type { Middleware } from "./middlewares/middleware";
export declare class HttpClient {
    private customFetch?;
    private middleware;
    /**
     * @public
     * @constructor
     * Creates an instance of a HttpClient which contains the middlewares and fetch implementation for request execution.
     * @param {...Middleware} middleware - The first middleware of the middleware chain or a sequence of all the Middleware handlers
     * If middlewares param is undefined, the httpClient instance will use the default array of middlewares.
     * Set middlewares to `null` if you do not wish to use middlewares.
     * If custom fetch is undefined, the httpClient instance uses the `DefaultFetchHandler`
     * @param {(request: string, init?: RequestInit) => Promise < Response >} custom fetch function - a Fetch API implementation
     *
     */
    constructor(customFetch?: ((request: string, init: RequestInit) => Promise<Response>) | undefined, ...middlewares: Middleware[]);
    /**
     * @private
     * Processes the middleware parameter passed to set this.middleware property
     * The calling function should validate if middleware is not undefined or not empty.
     * @param {...Middleware} middleware - The middleware passed
     * @returns Nothing
     */
    private setMiddleware;
    /**
     * Executes a request and returns a promise resolving the response.
     * @param url the request url.
     * @param options request options.
     * @returns the promise resolving the response.
     */
    executeFetch(url: string, requestInit: RequestInit, requestOptions?: Record<string, RequestOption>): Promise<Response>;
}
//# sourceMappingURL=httpClient.d.ts.map