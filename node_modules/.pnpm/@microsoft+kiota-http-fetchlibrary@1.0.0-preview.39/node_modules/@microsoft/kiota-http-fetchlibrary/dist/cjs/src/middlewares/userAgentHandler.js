"use strict";
/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserAgentHandler = void 0;
const tslib_1 = require("tslib");
const api_1 = require("@opentelemetry/api");
const observabilityOptions_1 = require("../observabilityOptions");
const headersUtil_1 = require("../utils/headersUtil");
const userAgentHandlerOptions_1 = require("./options/userAgentHandlerOptions");
const USER_AGENT_HEADER_KEY = "User-Agent";
class UserAgentHandler {
    /**
     * @public
     * @constructor
     * To create an instance of UserAgentHandler
     * @param {UserAgentHandlerOption} [options = new UserAgentHandlerOption()] - The options for the middleware
     */
    constructor(_options = new userAgentHandlerOptions_1.UserAgentHandlerOptions()) {
        this._options = _options;
    }
    /** @inheritdoc */
    execute(url, requestInit, requestOptions) {
        const obsOptions = (0, observabilityOptions_1.getObservabilityOptionsFromRequest)(requestOptions);
        if (obsOptions) {
            return api_1.trace.getTracer(obsOptions.getTracerInstrumentationName()).startActiveSpan("userAgentHandler - execute", (span) => {
                try {
                    span.setAttribute("com.microsoft.kiota.handler.useragent.enable", true);
                    return this.addValue(url, requestInit, requestOptions);
                }
                finally {
                    span.end();
                }
            });
        }
        else {
            return this.addValue(url, requestInit, requestOptions);
        }
    }
    addValue(url, requestInit, requestOptions) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let currentOptions = this._options;
            if (requestOptions && requestOptions[userAgentHandlerOptions_1.UserAgentHandlerOptionsKey]) {
                currentOptions = requestOptions[userAgentHandlerOptions_1.UserAgentHandlerOptionsKey];
            }
            if (currentOptions.enable) {
                const additionalValue = `${currentOptions.productName}/${currentOptions.productVersion}`;
                const currentValue = (0, headersUtil_1.getRequestHeader)(requestInit, USER_AGENT_HEADER_KEY);
                if (!currentValue || currentValue.indexOf(additionalValue) === -1) {
                    (0, headersUtil_1.appendRequestHeader)(requestInit, USER_AGENT_HEADER_KEY, additionalValue, " ");
                }
            }
            const response = yield ((_a = this.next) === null || _a === void 0 ? void 0 : _a.execute(url, requestInit, requestOptions));
            if (!response)
                throw new Error("No response returned by the next middleware");
            return response;
        });
    }
}
exports.UserAgentHandler = UserAgentHandler;
