"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonParseNode = void 0;
const kiota_abstractions_1 = require("@microsoft/kiota-abstractions");
class JsonParseNode {
    /**
     *
     */
    constructor(_jsonNode) {
        this._jsonNode = _jsonNode;
        this.getStringValue = () => this._jsonNode;
        this.getChildNode = (identifier) => new JsonParseNode(this._jsonNode[identifier]);
        this.getBooleanValue = () => this._jsonNode;
        this.getNumberValue = () => this._jsonNode;
        this.getGuidValue = () => (0, kiota_abstractions_1.parseGuidString)(this.getStringValue());
        this.getDateValue = () => this._jsonNode ? new Date(this._jsonNode) : undefined;
        this.getDateOnlyValue = () => kiota_abstractions_1.DateOnly.parse(this.getStringValue());
        this.getTimeOnlyValue = () => kiota_abstractions_1.TimeOnly.parse(this.getStringValue());
        this.getDurationValue = () => kiota_abstractions_1.Duration.parse(this.getStringValue());
        this.getCollectionOfPrimitiveValues = () => {
            return this._jsonNode.map((x) => {
                const currentParseNode = new JsonParseNode(x);
                const typeOfX = typeof x;
                if (typeOfX === "boolean") {
                    return currentParseNode.getBooleanValue();
                }
                else if (typeOfX === "string") {
                    return currentParseNode.getStringValue();
                }
                else if (typeOfX === "number") {
                    return currentParseNode.getNumberValue();
                }
                else if (x instanceof Date) {
                    return currentParseNode.getDateValue();
                }
                else if (x instanceof kiota_abstractions_1.DateOnly) {
                    return currentParseNode.getDateValue();
                }
                else if (x instanceof kiota_abstractions_1.TimeOnly) {
                    return currentParseNode.getDateValue();
                }
                else if (x instanceof kiota_abstractions_1.Duration) {
                    return currentParseNode.getDateValue();
                }
                else {
                    throw new Error(`encountered an unknown type during deserialization ${typeof x}`);
                }
            });
        };
        this.getCollectionOfObjectValues = (method) => {
            return this._jsonNode ? this._jsonNode
                .map((x) => new JsonParseNode(x))
                .map((x) => x.getObjectValue(method)) : undefined;
        };
        this.getObjectValue = (parsableFactory) => {
            const temp = {};
            const enableBackingStore = (0, kiota_abstractions_1.isBackingStoreEnabled)(parsableFactory(this)(temp));
            const value = enableBackingStore ? new Proxy(temp, (0, kiota_abstractions_1.createBackedModelProxyHandler)()) : temp;
            if (this.onBeforeAssignFieldValues) {
                this.onBeforeAssignFieldValues(value);
            }
            this.assignFieldValues(value, parsableFactory);
            if (this.onAfterAssignFieldValues) {
                this.onAfterAssignFieldValues(value);
            }
            return value;
        };
        this.assignFieldValues = (model, parsableFactory) => {
            const fields = parsableFactory(this)(model);
            if (!this._jsonNode)
                return;
            Object.entries(this._jsonNode).forEach(([k, v]) => {
                const deserializer = fields[k];
                if (deserializer) {
                    deserializer(new JsonParseNode(v));
                }
                else {
                    // additional properties
                    model[k] = v;
                }
            });
        };
        this.getCollectionOfEnumValues = (type) => {
            if (Array.isArray(this._jsonNode)) {
                return this._jsonNode
                    .map((x) => {
                    const node = new JsonParseNode(x);
                    return node.getEnumValue(type);
                })
                    .filter(Boolean);
            }
            return [];
        };
        this.getEnumValue = (type) => {
            const rawValue = this.getStringValue();
            if (!rawValue) {
                return undefined;
            }
            return type[(0, kiota_abstractions_1.toFirstCharacterUpper)(rawValue)];
        };
    }
    getByteArrayValue() {
        const strValue = this.getStringValue();
        if (strValue && strValue.length > 0) {
            return Buffer.from(strValue, "base64").buffer;
        }
        return undefined;
    }
}
exports.JsonParseNode = JsonParseNode;
