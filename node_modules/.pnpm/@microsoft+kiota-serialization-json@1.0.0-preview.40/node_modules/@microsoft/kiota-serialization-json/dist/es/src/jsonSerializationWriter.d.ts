import { DateOnly, Duration, type ModelSerializerFunction, type Parsable, type SerializationWriter, TimeOnly } from "@microsoft/kiota-abstractions";
import type { Guid } from "guid-typescript";
export declare class JsonSerializationWriter implements SerializationWriter {
    writeByteArrayValue(key?: string | undefined, value?: ArrayBuffer | undefined): void;
    private readonly writer;
    private static propertySeparator;
    onBeforeObjectSerialization: ((value: Parsable) => void) | undefined;
    onAfterObjectSerialization: ((value: Parsable) => void) | undefined;
    onStartObjectSerialization: ((value: Parsable, writer: SerializationWriter) => void) | undefined;
    writeStringValue: (key?: string, value?: string) => void;
    private writePropertyName;
    writeBooleanValue: (key?: string, value?: boolean) => void;
    writeNumberValue: (key?: string, value?: number) => void;
    writeGuidValue: (key?: string, value?: Guid) => void;
    writeDateValue: (key?: string, value?: Date) => void;
    writeDateOnlyValue: (key?: string, value?: DateOnly) => void;
    writeTimeOnlyValue: (key?: string, value?: TimeOnly) => void;
    writeDurationValue: (key?: string, value?: Duration) => void;
    writeNullValue: (key?: string) => void;
    writeCollectionOfPrimitiveValues: <T>(key?: string, values?: T[] | undefined) => void;
    writeCollectionOfObjectValues: <T extends Parsable>(key: string, values: T[], serializerMethod: ModelSerializerFunction<T>) => void;
    writeObjectValue<T extends Parsable>(key: string | undefined, value: T, serializerMethod: ModelSerializerFunction<T>): void;
    writeEnumValue: <T>(key?: string | undefined, ...values: (T | undefined)[]) => void;
    getSerializedContent: () => ArrayBuffer;
    private convertStringToArrayBuffer;
    writeAdditionalData: (additionalData: Record<string, unknown> | undefined) => void;
    private writeNonParsableObjectValue;
    private writeAnyValue;
}
//# sourceMappingURL=jsonSerializationWriter.d.ts.map