import { DateOnly, Duration, type Parsable, type ParsableFactory, type ParseNode, TimeOnly } from "@microsoft/kiota-abstractions";
export declare class JsonParseNode implements ParseNode {
    private readonly _jsonNode;
    /**
     *
     */
    constructor(_jsonNode: unknown);
    onBeforeAssignFieldValues: ((value: Parsable) => void) | undefined;
    onAfterAssignFieldValues: ((value: Parsable) => void) | undefined;
    getStringValue: () => string;
    getChildNode: (identifier: string) => ParseNode | undefined;
    getBooleanValue: () => boolean;
    getNumberValue: () => number;
    getGuidValue: () => import("guid-typescript").Guid | undefined;
    getDateValue: () => Date | undefined;
    getDateOnlyValue: () => DateOnly | undefined;
    getTimeOnlyValue: () => TimeOnly | undefined;
    getDurationValue: () => Duration | undefined;
    getCollectionOfPrimitiveValues: <T>() => T[] | undefined;
    getByteArrayValue(): ArrayBuffer | undefined;
    getCollectionOfObjectValues: <T extends Parsable>(method: ParsableFactory<T>) => T[] | undefined;
    getObjectValue: <T extends Parsable>(parsableFactory: ParsableFactory<T>) => T;
    private assignFieldValues;
    getCollectionOfEnumValues: <T>(type: any) => T[];
    getEnumValue: <T>(type: any) => T | undefined;
}
//# sourceMappingURL=jsonParseNode.d.ts.map