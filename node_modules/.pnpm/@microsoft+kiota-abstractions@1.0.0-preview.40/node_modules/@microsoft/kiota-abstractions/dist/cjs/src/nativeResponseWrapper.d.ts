import type { RequestOption } from "./requestOption";
import type { ResponseHandler } from "./responseHandler";
type originalCallType<modelType, queryParametersType, headersType> = (q?: queryParametersType, h?: headersType, o?: RequestOption[] | undefined, responseHandler?: ResponseHandler) => Promise<modelType>;
type originalCallWithBodyType<modelType, queryParametersType, headersType, requestBodyType> = (requestBody: requestBodyType, q?: queryParametersType, h?: headersType, o?: RequestOption[] | undefined, responseHandler?: ResponseHandler) => Promise<modelType>;
/** This class can be used to wrap a request using the fluent API and get the native response object in return. */
export declare class NativeResponseWrapper {
    static CallAndGetNative: <modelType, nativeResponseType, queryParametersType, headersType>(originalCall: originalCallType<modelType, queryParametersType, headersType>, q?: queryParametersType | undefined, h?: headersType | undefined, o?: RequestOption[] | undefined) => Promise<nativeResponseType>;
    static CallAndGetNativeWithBody: <modelType, nativeResponseType, queryParametersType, headersType, requestBodyType>(originalCall: originalCallWithBodyType<modelType, queryParametersType, headersType, requestBodyType>, requestBody: requestBodyType, q?: queryParametersType | undefined, h?: headersType | undefined, o?: RequestOption[] | undefined) => Promise<nativeResponseType>;
}
export {};
//# sourceMappingURL=nativeResponseWrapper.d.ts.map