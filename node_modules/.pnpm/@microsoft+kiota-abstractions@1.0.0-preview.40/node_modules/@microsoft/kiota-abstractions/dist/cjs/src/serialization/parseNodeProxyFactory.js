"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParseNodeProxyFactory = void 0;
/** Proxy factory that allows the composition of before and after callbacks on existing factories. */
class ParseNodeProxyFactory {
    getValidContentType() {
        return this._concrete.getValidContentType();
    }
    /**
     * Creates a new proxy factory that wraps the specified concrete factory while composing the before and after callbacks.
     * @param _concrete the concrete factory to wrap
     * @param _onBefore the callback to invoke before the deserialization of any model object.
     * @param _onAfter the callback to invoke after the deserialization of any model object.
     */
    constructor(_concrete, _onBefore, _onAfter) {
        this._concrete = _concrete;
        this._onBefore = _onBefore;
        this._onAfter = _onAfter;
        if (!_concrete) {
            throw new Error("_concrete cannot be undefined");
        }
    }
    getRootParseNode(contentType, content) {
        const node = this._concrete.getRootParseNode(contentType, content);
        const originalBefore = node.onBeforeAssignFieldValues;
        const originalAfter = node.onAfterAssignFieldValues;
        node.onBeforeAssignFieldValues = (value) => {
            this._onBefore && this._onBefore(value);
            originalBefore && originalBefore(value);
        };
        node.onAfterAssignFieldValues = (value) => {
            this._onAfter && this._onAfter(value);
            originalAfter && originalAfter(value);
        };
        return node;
    }
}
exports.ParseNodeProxyFactory = ParseNodeProxyFactory;
//# sourceMappingURL=parseNodeProxyFactory.js.map