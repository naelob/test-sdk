import { Headers } from "./headers";
import { type HttpMethod } from "./httpMethod";
import type { PrimitiveTypesForDeserializationType, RequestAdapter } from "./requestAdapter";
import type { RequestConfiguration } from "./requestConfiguration";
import type { RequestOption } from "./requestOption";
import type { ModelSerializerFunction, Parsable } from "./serialization";
/** This class represents an abstract HTTP request. */
export declare class RequestInformation implements RequestInformationSetContent {
    /**
     * Initializes a request information instance with the provided values.
     * @param httpMethod The HTTP method for the request.
     * @param urlTemplate The URL template for the request.
     * @param pathParameters The path parameters for the request.
     */
    constructor(httpMethod?: HttpMethod, urlTemplate?: string, pathParameters?: Record<string, unknown>);
    /** The URI of the request. */
    private uri?;
    /** The path parameters for the request. */
    pathParameters: Record<string, unknown>;
    /** The URL template for the request */
    urlTemplate?: string;
    /** Gets the URL of the request  */
    get URL(): string;
    /** Sets the URL of the request */
    set URL(url: string);
    static raw_url_key: string;
    /** The HTTP method for the request */
    httpMethod?: HttpMethod;
    /** The Request Body. */
    content?: ArrayBuffer;
    /** The Query Parameters of the request. */
    queryParameters: Record<string, string | number | boolean | undefined>;
    /** The Request Headers. */
    headers: Headers;
    private _requestOptions;
    /** Gets the request options for the request. */
    getRequestOptions(): Record<string, RequestOption>;
    /** Adds the headers for the request. */
    addRequestHeaders(source: Record<string, string | string[]> | undefined): void;
    /** Adds the request options for the request. */
    addRequestOptions(options: RequestOption[] | undefined): void;
    /** Removes the request options for the request. */
    removeRequestOptions(...options: RequestOption[]): void;
    private static readonly binaryContentType;
    private static readonly contentTypeHeader;
    private static readonly tracerKey;
    private static readonly requestTypeKey;
    /**
     * Sets the request body from a model with the specified content type.
     * @param value the models.
     * @param contentType the content type.
     * @param requestAdapter The adapter service to get the serialization writer from.
     * @typeParam T the model type.
     */
    setContentFromParsable: <T extends Parsable>(requestAdapter?: RequestAdapter | undefined, contentType?: string | undefined, value?: T | T[] | undefined, modelSerializerFunction?: ModelSerializerFunction<T> | undefined) => void;
    private setContentAndContentType;
    private getSerializationWriter;
    /**
     * Sets the request body from a model with the specified content type.
     * @param value the scalar values to serialize.
     * @param contentType the content type.
     * @param requestAdapter The adapter service to get the serialization writer from.
     * @typeParam T the model type.
     */
    setContentFromScalar: <T extends PrimitiveTypesForDeserializationType>(requestAdapter: RequestAdapter | undefined, contentType: string | undefined, value: T | T[]) => void;
    /**
     * Sets the request body to be a binary stream.
     * @param value the binary stream
     * @param contentType the content type.
     */
    setStreamContent: (value: ArrayBuffer, contentType?: string) => void;
    /**
     * Sets the query string parameters from a raw object.
     * @param parameters the parameters.
     * @param p the mapping from code symbol to URI template parameter name.
     */
    setQueryStringParametersFromRawObject<T extends object>(q?: T, p?: Record<string, string>): void;
    /**
     * Configure the current request with headers, query parameters and options.
     * @param config the configuration object to use.
     * @param queryParametersMapper mapping between code symbols and URI template parameter names.
     */
    configure<T extends object>(config?: RequestConfiguration<T>, queryParametersMapper?: Record<string, string>): void;
}
/**
 * Describes the contract of request adapter set content methods so it can be used in request metadata.
 */
export interface RequestInformationSetContent {
    setStreamContent(value: ArrayBuffer, contentType?: string): void;
    setContentFromScalar<T extends PrimitiveTypesForDeserializationType>(requestAdapter: RequestAdapter | undefined, contentType: string | undefined, value: T[] | T): void;
    setContentFromParsable<T extends Parsable>(requestAdapter?: RequestAdapter | undefined, contentType?: string | undefined, value?: T[] | T, modelSerializerFunction?: ModelSerializerFunction<T>): void;
}
//# sourceMappingURL=requestInformation.d.ts.map