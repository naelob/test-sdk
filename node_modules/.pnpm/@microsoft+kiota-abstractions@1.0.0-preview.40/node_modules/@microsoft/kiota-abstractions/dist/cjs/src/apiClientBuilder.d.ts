import { type ParseNodeFactory, type SerializationWriterFactory } from "./serialization";
/**
 * Registers the default serializer to the registry.
 * @param type the class of the factory to be registered.
 */
export declare function registerDefaultSerializer(type: new () => SerializationWriterFactory): void;
/**
 * Registers the default deserializer to the registry.
 * @param type the class of the factory to be registered.
 */
export declare function registerDefaultDeserializer(type: new () => ParseNodeFactory): void;
/**
 * Enables the backing store on default serialization writers and the given serialization writer.
 * @param original The serialization writer to enable the backing store on.
 * @return A new serialization writer with the backing store enabled.
 */
export declare function enableBackingStoreForSerializationWriterFactory(original: SerializationWriterFactory): SerializationWriterFactory;
/**
 * Enables the backing store on default parse node factories and the given parse node factory.
 * @param original The parse node factory to enable the backing store on.
 * @return A new parse node factory with the backing store enabled.
 */
export declare function enableBackingStoreForParseNodeFactory(original: ParseNodeFactory): ParseNodeFactory;
//# sourceMappingURL=apiClientBuilder.d.ts.map