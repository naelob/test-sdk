"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllowedHostsValidator = void 0;
/** Maintains a list of valid hosts and allows authentication providers to check whether a host is valid before authenticating a request */
class AllowedHostsValidator {
    /**
     * Creates a new AllowedHostsValidator object with provided values.
     * @param allowedHosts A list of valid hosts.  If the list is empty, all hosts are valid.
     */
    constructor(allowedHosts = new Set()) {
        this.allowedHosts = allowedHosts !== null && allowedHosts !== void 0 ? allowedHosts : new Set();
    }
    /**
     * Gets the list of valid hosts.  If the list is empty, all hosts are valid.
     * @returns A list of valid hosts.  If the list is empty, all hosts are valid.
     */
    getAllowedHosts() {
        return Array.from(this.allowedHosts);
    }
    /**
     * Sets the list of valid hosts.  If the list is empty, all hosts are valid.
     * @param allowedHosts A list of valid hosts.  If the list is empty, all hosts are valid.
     */
    setAllowedHosts(allowedHosts) {
        this.allowedHosts = allowedHosts;
    }
    /**
     * Checks whether the provided host is valid.
     * @param url The url to check.
     */
    isUrlHostValid(url) {
        var _a;
        if (!url)
            return false;
        if (this.allowedHosts.size === 0)
            return true;
        const schemeAndRest = url.split("://");
        if (schemeAndRest.length >= 2) {
            const rest = schemeAndRest[1];
            if (rest) {
                return this.isHostAndPathValid(rest);
            }
        }
        else if (!url.startsWith("http")) {
            // protocol relative URL domain.tld/path
            return this.isHostAndPathValid(url);
        }
        //@ts-ignore
        if (window && window.location && window.location.host) {
            // we're in a browser, and we're using paths only ../path, ./path, /path, etc.
            //@ts-ignore
            return this.allowedHosts.has((_a = window.location.host) === null || _a === void 0 ? void 0 : _a.toLowerCase());
        }
        return false;
    }
    isHostAndPathValid(rest) {
        const hostAndRest = rest.split("/");
        if (hostAndRest.length >= 2) {
            const host = hostAndRest[0];
            if (host) {
                return this.allowedHosts.has(host.toLowerCase());
            }
        }
        return false;
    }
}
exports.AllowedHostsValidator = AllowedHostsValidator;
//# sourceMappingURL=allowedHostsValidator.js.map