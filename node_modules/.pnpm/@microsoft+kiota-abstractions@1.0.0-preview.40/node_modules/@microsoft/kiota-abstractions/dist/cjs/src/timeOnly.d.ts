export declare class TimeOnly implements TimeOnlyInterface {
    /**
     * Creates a new TimeOnly from the given parameters.
     * @returns The new TimeOnly
     * @throws An error if the milliseconds are invalid
     * @throws An error if the seconds are invalid
     * @throws An error if the minutes are invalid
     * @throws An error if the hours are invalid
     * @throws An error if the milliseconds are invalid
     */
    constructor({ hours, minutes, seconds, picoseconds, }: Partial<TimeOnlyInterface>);
    hours: number;
    minutes: number;
    seconds: number;
    picoseconds: number;
    /**
     * Creates a new TimeOnly from the given date.
     * @param date The date
     * @returns The new TimeOnly
     * @throws An error if the date is invalid
     */
    static fromDate(date: Date): TimeOnly;
    /**
     * Parses a string into a TimeOnly. The string can be of the ISO 8601 time only format or a number representing the ticks of a Date.
     * @param value The value to parse
     * @returns The parsed TimeOnly.
     * @throws An error if the value is invalid
     */
    static parse(value: string | undefined): TimeOnly | undefined;
    /**
     * Returns a string representation of the time in the format HH:MM:SS.SSSSSSSSSSSSSS
     * @returns The time in the format HH:MM:SS.SSSSSSSSSSSSSS
     * @throws An error if the time is invalid
     */
    toString(): string;
}
interface TimeOnlyInterface {
    /**
     * The hours
     * @default 0
     * @minimum 0
     * @maximum 23
     */
    hours: number;
    /**
     * The minutes
     * @default 0
     * @minimum 0
     * @maximum 59
     */
    minutes: number;
    /**
     * The seconds
     * @default 0
     * @minimum 0
     * @maximum 59
     */
    seconds: number;
    /**
     * The milliseconds
     * @default 0
     * @minimum 0
     * @maximum 999999999999
     */
    picoseconds: number;
}
export {};
//# sourceMappingURL=timeOnly.d.ts.map