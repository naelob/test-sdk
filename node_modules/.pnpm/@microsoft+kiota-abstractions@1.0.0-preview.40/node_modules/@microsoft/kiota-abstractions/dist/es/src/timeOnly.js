import { formatSegment } from "./dateOnly";
/*
 * Represents a time only. ISO 8601.
 */
export class TimeOnly {
    /**
     * Creates a new TimeOnly from the given parameters.
     * @returns The new TimeOnly
     * @throws An error if the milliseconds are invalid
     * @throws An error if the seconds are invalid
     * @throws An error if the minutes are invalid
     * @throws An error if the hours are invalid
     * @throws An error if the milliseconds are invalid
     */
    constructor({ hours = 0, minutes = 0, seconds = 0, picoseconds = 0, }) {
        if (hours < 0 || hours > 23) {
            throw new Error("Hour must be between 0 and 23");
        }
        if (minutes < 0 || minutes > 59) {
            throw new Error("Minute must be between 0 and 59");
        }
        if (seconds < 0 || seconds > 59) {
            throw new Error("Second must be between 0 and 59");
        }
        if (picoseconds < 0 || picoseconds > 999999999999) {
            throw new Error("Millisecond must be between 0 and 999999999999");
        }
        this.hours = hours;
        this.minutes = minutes;
        this.seconds = seconds;
        this.picoseconds = picoseconds;
    }
    /**
     * Creates a new TimeOnly from the given date.
     * @param date The date
     * @returns The new TimeOnly
     * @throws An error if the date is invalid
     */
    static fromDate(date) {
        if (!date) {
            throw new Error("Date cannot be undefined");
        }
        return new TimeOnly({
            hours: date.getHours(),
            minutes: date.getMinutes(),
            seconds: date.getSeconds(),
            picoseconds: date.getMilliseconds() * 1000000000,
        });
    }
    /**
     * Parses a string into a TimeOnly. The string can be of the ISO 8601 time only format or a number representing the ticks of a Date.
     * @param value The value to parse
     * @returns The parsed TimeOnly.
     * @throws An error if the value is invalid
     */
    static parse(value) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (!value || value.length === 0) {
            return undefined;
        }
        const ticks = Date.parse(value);
        if (isNaN(ticks)) {
            const exec = /^(?<hours>[01]\d|2[0-3]):(?<minutes>[0-5]\d):(?<seconds>[0-5]\d)(?:[.](?<milliseconds>\d{1,12}))?$/gi.exec(value);
            if (exec) {
                const hours = parseInt((_b = (_a = exec.groups) === null || _a === void 0 ? void 0 : _a.hours) !== null && _b !== void 0 ? _b : "");
                const minutes = parseInt((_d = (_c = exec.groups) === null || _c === void 0 ? void 0 : _c.minutes) !== null && _d !== void 0 ? _d : "");
                const seconds = parseInt((_f = (_e = exec.groups) === null || _e === void 0 ? void 0 : _e.seconds) !== null && _f !== void 0 ? _f : "");
                const milliseconds = parseInt((_h = (_g = exec.groups) === null || _g === void 0 ? void 0 : _g.milliseconds) !== null && _h !== void 0 ? _h : "0");
                return new TimeOnly({
                    hours,
                    minutes,
                    seconds,
                    picoseconds: milliseconds,
                });
            }
            else {
                throw new Error("Value is not a valid time-only representation");
            }
        }
        else {
            const date = new Date(ticks);
            return this.fromDate(date);
        }
    }
    /**
     * Returns a string representation of the time in the format HH:MM:SS.SSSSSSSSSSSSSS
     * @returns The time in the format HH:MM:SS.SSSSSSSSSSSSSS
     * @throws An error if the time is invalid
     */
    toString() {
        return `${formatSegment(this.hours, 2)}:${formatSegment(this.minutes, 2)}:${formatSegment(this.seconds, 2)}.${formatSegment(this.picoseconds, 12)}`;
    }
}
//# sourceMappingURL=timeOnly.js.map