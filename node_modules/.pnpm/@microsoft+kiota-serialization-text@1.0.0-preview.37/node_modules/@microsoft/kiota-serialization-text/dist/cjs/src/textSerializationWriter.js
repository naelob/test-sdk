"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextSerializationWriter = void 0;
class TextSerializationWriter {
    constructor() {
        this.writer = [];
        this.writeStringValue = (key, value) => {
            if (key || key !== "") {
                throw new Error(TextSerializationWriter.noStructuredDataMessage);
            }
            if (value) {
                if (this.writer.length > 0) {
                    throw new Error("a value was already written for this serialization writer, text content only supports a single value");
                }
                else {
                    this.writer.push(value);
                }
            }
        };
        this.writeBooleanValue = (key, value) => {
            if (value !== null && value !== undefined) {
                this.writeStringValue(key, `${value}`);
            }
        };
        this.writeNumberValue = (key, value) => {
            if (value) {
                this.writeStringValue(key, `${value}`);
            }
        };
        this.writeGuidValue = (key, value) => {
            if (value) {
                this.writeStringValue(key, `"${value}"`);
            }
        };
        this.writeDateValue = (key, value) => {
            if (value) {
                this.writeStringValue(key, `"${value.toISOString()}"`);
            }
        };
        this.writeDateOnlyValue = (key, value) => {
            if (value) {
                this.writeStringValue(key, `"${value.toString()}"`);
            }
        };
        this.writeTimeOnlyValue = (key, value) => {
            if (value) {
                this.writeStringValue(key, `"${value.toString()}"`);
            }
        };
        this.writeDurationValue = (key, value) => {
            if (value) {
                this.writeStringValue(key, `"${value.toString()}"`);
            }
        };
        this.writeNullValue = (key) => {
            this.writeStringValue(key, `null`);
        };
        this.writeCollectionOfPrimitiveValues = (
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        key, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        values) => {
            throw new Error(TextSerializationWriter.noStructuredDataMessage);
        };
        this.writeCollectionOfObjectValues = (
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        key, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        values, serializerMethod) => {
            throw new Error(TextSerializationWriter.noStructuredDataMessage);
        };
        this.writeObjectValue = (
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        key, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        value, serializerMethod) => {
            throw new Error(TextSerializationWriter.noStructuredDataMessage);
        };
        this.writeEnumValue = (key, ...values) => {
            if (values.length > 0) {
                const rawValues = values
                    .filter((x) => x !== undefined)
                    .map((x) => `${x}`);
                if (rawValues.length > 0) {
                    this.writeStringValue(key, rawValues.reduce((x, y) => `${x}, ${y}`));
                }
            }
        };
        this.getSerializedContent = () => {
            return this.convertStringToArrayBuffer(this.writer.join(``));
        };
        this.convertStringToArrayBuffer = (str) => {
            const encoder = new TextEncoder();
            const encodedString = encoder.encode(str);
            return encodedString.buffer;
        };
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        this.writeAdditionalData = (value) => {
            throw new Error(TextSerializationWriter.noStructuredDataMessage);
        };
    }
    writeByteArrayValue(key, value) {
        if (!value) {
            throw new Error("value cannot be undefined");
        }
        const b64 = Buffer.from(value).toString("base64");
        this.writeStringValue(key, b64);
    }
}
exports.TextSerializationWriter = TextSerializationWriter;
TextSerializationWriter.noStructuredDataMessage = "text does not support structured data";
