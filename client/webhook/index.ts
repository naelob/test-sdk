/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { serializeWebhookDto, type WebhookDto } from '../models/';
import { type WebhookItemRequestBuilder, WebhookItemRequestBuilderRequestsMetadata, WebhookItemRequestBuilderUriTemplate } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /webhook
 */
export interface WebhookRequestBuilder extends BaseRequestBuilder<WebhookRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.webhook.item collection
     * @param id Unique identifier of the item
     * @returns a WebhookItemRequestBuilder
     */
     byId(id: string) : WebhookItemRequestBuilder;
    /**
     * Retrieve webhooks metadata 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ArrayBuffer
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * Add webhook metadata
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     post(body: WebhookDto, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve webhooks metadata 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Add webhook metadata
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: WebhookDto, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WebhookRequestBuilderNavigationMetadata: Record<Exclude<keyof WebhookRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        uriTemplate: WebhookItemRequestBuilderUriTemplate,
        requestsMetadata: WebhookItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WebhookRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        adapterMethodName: "sendPrimitiveAsync",
        responseBodyFactory:  "ArrayBuffer",
    },
    post: {
        adapterMethodName: "sendNoResponseContentAsync",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWebhookDto,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const WebhookRequestBuilderUriTemplate = "{+baseurl}/webhook";
/* tslint:enable */
/* eslint-enable */
