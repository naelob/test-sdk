/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createUnifiedNoteOutputFromDiscriminatorValue, deserializeIntoApiResponse, serializeApiResponse, serializeUnifiedNoteInput, serializeUnifiedNoteOutput, type ApiResponse, type UnifiedNoteInput, type UnifiedNoteOutput } from '../../models/';
import { BatchRequestBuilderRequestsMetadata, BatchRequestBuilderUriTemplate, type BatchRequestBuilder } from './batch/';
import { NotesItemRequestBuilderRequestsMetadata, NotesItemRequestBuilderUriTemplate, type NotesItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a notesGetResponse
 */
export function createNotesGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNotesGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a notesPostResponse
 */
export function createNotesPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNotesPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoNotesGetResponse(notesGetResponse: Partial<NotesGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoApiResponse(notesGetResponse),
        "data": n => { notesGetResponse.data = n.getObjectValue<UnifiedNoteOutput>(createUnifiedNoteOutputFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoNotesPostResponse(notesPostResponse: Partial<NotesPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoApiResponse(notesPostResponse),
        "data": n => { notesPostResponse.data = n.getObjectValue<UnifiedNoteOutput>(createUnifiedNoteOutputFromDiscriminatorValue); },
    }
}
export interface NotesGetResponse extends ApiResponse, Parsable {
    /**
     * The data property
     */
    data?: UnifiedNoteOutput;
}
export interface NotesPostResponse extends ApiResponse, Parsable {
    /**
     * The data property
     */
    data?: UnifiedNoteOutput;
}
/**
 * Builds and executes requests for operations under /crm/notes
 */
export interface NotesRequestBuilder extends BaseRequestBuilder<NotesRequestBuilder> {
    /**
     * The batch property
     */
    get batch(): BatchRequestBuilder;
    /**
     * Gets an item from the ApiSdk.crm.notes.item collection
     * @param id id of the note you want to retrieve.
     * @returns a NotesItemRequestBuilder
     */
     byId(id: string) : NotesItemRequestBuilder;
    /**
     * List a batch of Notes
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of NotesGetResponse
     */
     get(requestConfiguration?: RequestConfiguration<NotesRequestBuilderGetQueryParameters> | undefined) : Promise<NotesGetResponse | undefined>;
    /**
     * Create a note in any supported Crm software
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of NotesPostResponse
     */
     post(body: UnifiedNoteInput, requestConfiguration?: RequestConfiguration<NotesRequestBuilderPostQueryParameters> | undefined) : Promise<NotesPostResponse | undefined>;
    /**
     * List a batch of Notes
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<NotesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a note in any supported Crm software
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: UnifiedNoteInput, requestConfiguration?: RequestConfiguration<NotesRequestBuilderPostQueryParameters> | undefined) : RequestInformation;
}
/**
 * List a batch of Notes
 */
export interface NotesRequestBuilderGetQueryParameters {
    /**
     * Set to true to include data from the original Crm software.
     */
    remoteData?: boolean;
}
/**
 * Create a note in any supported Crm software
 */
export interface NotesRequestBuilderPostQueryParameters {
    /**
     * Set to true to include data from the original Crm software.
     */
    remoteData?: boolean;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeNotesGetResponse(writer: SerializationWriter, notesGetResponse: Partial<NotesGetResponse> | undefined = {}) : void {
    serializeApiResponse(writer, notesGetResponse)
    writer.writeObjectValue<UnifiedNoteOutput>("data", notesGetResponse.data, serializeUnifiedNoteOutput);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeNotesPostResponse(writer: SerializationWriter, notesPostResponse: Partial<NotesPostResponse> | undefined = {}) : void {
    serializeApiResponse(writer, notesPostResponse)
    writer.writeObjectValue<UnifiedNoteOutput>("data", notesPostResponse.data, serializeUnifiedNoteOutput);
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const NotesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "remoteData": "remote_data",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const NotesRequestBuilderNavigationMetadata: Record<Exclude<keyof NotesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        uriTemplate: NotesItemRequestBuilderUriTemplate,
        requestsMetadata: NotesItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
    batch: {
        uriTemplate: BatchRequestBuilderUriTemplate,
        requestsMetadata: BatchRequestBuilderRequestsMetadata,
    },
};
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const NotesRequestBuilderPostQueryParametersMapper: Record<string, string> = {
    "remoteData": "remote_data",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const NotesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createNotesGetResponseFromDiscriminatorValue,
        queryParametersMapper: NotesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        responseBodyContentType: "application/json",
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createNotesPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUnifiedNoteInput,
        requestInformationContentSetMethod: "setContentFromParsable",
        queryParametersMapper: NotesRequestBuilderPostQueryParametersMapper,
    },
};
/**
 * Uri template for the request builder.
 */
export const NotesRequestBuilderUriTemplate = "{+baseurl}/crm/notes{?remote_data*}";
/* tslint:enable */
/* eslint-enable */
