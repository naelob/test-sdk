/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createUnifiedEngagementOutputFromDiscriminatorValue, deserializeIntoApiResponse, serializeApiResponse, serializeUnifiedEngagementInput, serializeUnifiedEngagementOutput, type ApiResponse, type UnifiedEngagementInput, type UnifiedEngagementOutput } from '../../models/';
import { BatchRequestBuilderRequestsMetadata, BatchRequestBuilderUriTemplate, type BatchRequestBuilder } from './batch/';
import { EngagementsItemRequestBuilderRequestsMetadata, EngagementsItemRequestBuilderUriTemplate, type EngagementsItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a engagementsGetResponse
 */
export function createEngagementsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEngagementsGetResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a engagementsPatchResponse
 */
export function createEngagementsPatchResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEngagementsPatchResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a engagementsPostResponse
 */
export function createEngagementsPostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEngagementsPostResponse;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEngagementsGetResponse(engagementsGetResponse: Partial<EngagementsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoApiResponse(engagementsGetResponse),
        "data": n => { engagementsGetResponse.data = n.getObjectValue<UnifiedEngagementOutput>(createUnifiedEngagementOutputFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEngagementsPatchResponse(engagementsPatchResponse: Partial<EngagementsPatchResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoApiResponse(engagementsPatchResponse),
        "data": n => { engagementsPatchResponse.data = n.getObjectValue<UnifiedEngagementOutput>(createUnifiedEngagementOutputFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoEngagementsPostResponse(engagementsPostResponse: Partial<EngagementsPostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoApiResponse(engagementsPostResponse),
        "data": n => { engagementsPostResponse.data = n.getObjectValue<UnifiedEngagementOutput>(createUnifiedEngagementOutputFromDiscriminatorValue); },
    }
}
export interface EngagementsGetResponse extends ApiResponse, Parsable {
    /**
     * The data property
     */
    data?: UnifiedEngagementOutput;
}
export interface EngagementsPatchResponse extends ApiResponse, Parsable {
    /**
     * The data property
     */
    data?: UnifiedEngagementOutput;
}
export interface EngagementsPostResponse extends ApiResponse, Parsable {
    /**
     * The data property
     */
    data?: UnifiedEngagementOutput;
}
/**
 * Builds and executes requests for operations under /crm/engagements
 */
export interface EngagementsRequestBuilder extends BaseRequestBuilder<EngagementsRequestBuilder> {
    /**
     * The batch property
     */
    get batch(): BatchRequestBuilder;
    /**
     * Gets an item from the ApiSdk.crm.engagements.item collection
     * @param id id of the engagement you want to retrieve.
     * @returns a EngagementsItemRequestBuilder
     */
     byId(id: string) : EngagementsItemRequestBuilder;
    /**
     * List a batch of Engagements
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of EngagementsGetResponse
     */
     get(requestConfiguration?: RequestConfiguration<EngagementsRequestBuilderGetQueryParameters> | undefined) : Promise<EngagementsGetResponse | undefined>;
    /**
     * Update a Engagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of EngagementsPatchResponse
     */
     patch(requestConfiguration?: RequestConfiguration<EngagementsRequestBuilderPatchQueryParameters> | undefined) : Promise<EngagementsPatchResponse | undefined>;
    /**
     * Create a engagement in any supported Crm software
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of EngagementsPostResponse
     */
     post(body: UnifiedEngagementInput, requestConfiguration?: RequestConfiguration<EngagementsRequestBuilderPostQueryParameters> | undefined) : Promise<EngagementsPostResponse | undefined>;
    /**
     * List a batch of Engagements
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<EngagementsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update a Engagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(requestConfiguration?: RequestConfiguration<EngagementsRequestBuilderPatchQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a engagement in any supported Crm software
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: UnifiedEngagementInput, requestConfiguration?: RequestConfiguration<EngagementsRequestBuilderPostQueryParameters> | undefined) : RequestInformation;
}
/**
 * List a batch of Engagements
 */
export interface EngagementsRequestBuilderGetQueryParameters {
    /**
     * Set to true to include data from the original Crm software.
     */
    remoteData?: boolean;
}
/**
 * Update a Engagement
 */
export interface EngagementsRequestBuilderPatchQueryParameters {
    id?: string;
}
/**
 * Create a engagement in any supported Crm software
 */
export interface EngagementsRequestBuilderPostQueryParameters {
    /**
     * Set to true to include data from the original Crm software.
     */
    remoteData?: boolean;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEngagementsGetResponse(writer: SerializationWriter, engagementsGetResponse: Partial<EngagementsGetResponse> | undefined = {}) : void {
    serializeApiResponse(writer, engagementsGetResponse)
    writer.writeObjectValue<UnifiedEngagementOutput>("data", engagementsGetResponse.data, serializeUnifiedEngagementOutput);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEngagementsPatchResponse(writer: SerializationWriter, engagementsPatchResponse: Partial<EngagementsPatchResponse> | undefined = {}) : void {
    serializeApiResponse(writer, engagementsPatchResponse)
    writer.writeObjectValue<UnifiedEngagementOutput>("data", engagementsPatchResponse.data, serializeUnifiedEngagementOutput);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEngagementsPostResponse(writer: SerializationWriter, engagementsPostResponse: Partial<EngagementsPostResponse> | undefined = {}) : void {
    serializeApiResponse(writer, engagementsPostResponse)
    writer.writeObjectValue<UnifiedEngagementOutput>("data", engagementsPostResponse.data, serializeUnifiedEngagementOutput);
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const EngagementsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "remoteData": "remote_data",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const EngagementsRequestBuilderNavigationMetadata: Record<Exclude<keyof EngagementsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        uriTemplate: EngagementsItemRequestBuilderUriTemplate,
        requestsMetadata: EngagementsItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
    batch: {
        uriTemplate: BatchRequestBuilderUriTemplate,
        requestsMetadata: BatchRequestBuilderRequestsMetadata,
    },
};
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const EngagementsRequestBuilderPostQueryParametersMapper: Record<string, string> = {
    "remoteData": "remote_data",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const EngagementsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createEngagementsGetResponseFromDiscriminatorValue,
        queryParametersMapper: EngagementsRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createEngagementsPatchResponseFromDiscriminatorValue,
    },
    post: {
        responseBodyContentType: "application/json",
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createEngagementsPostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUnifiedEngagementInput,
        requestInformationContentSetMethod: "setContentFromParsable",
        queryParametersMapper: EngagementsRequestBuilderPostQueryParametersMapper,
    },
};
/**
 * Uri template for the request builder.
 */
export const EngagementsRequestBuilderUriTemplate = "{+baseurl}/crm/engagements?id={id}{&remote_data*}";
/* tslint:enable */
/* eslint-enable */
