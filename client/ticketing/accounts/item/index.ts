/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createUnifiedAccountOutputFromDiscriminatorValue, deserializeIntoApiResponse, serializeApiResponse, serializeUnifiedAccountOutput, type ApiResponse, type UnifiedAccountOutput } from '../../../models/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccountsGetResponse extends ApiResponse, Parsable {
    /**
     * The data property
     */
    data?: UnifiedAccountOutput;
}
/**
 * Builds and executes requests for operations under /ticketing/accounts/{id}
 */
export interface AccountsItemRequestBuilder extends BaseRequestBuilder<AccountsItemRequestBuilder> {
    /**
     * Retrieve an account from any connected Ticketing software
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of AccountsGetResponse
     */
     get(requestConfiguration?: RequestConfiguration<AccountsItemRequestBuilderGetQueryParameters> | undefined) : Promise<AccountsGetResponse | undefined>;
    /**
     * Retrieve an account from any connected Ticketing software
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AccountsItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Retrieve an account from any connected Ticketing software
 */
export interface AccountsItemRequestBuilderGetQueryParameters {
    /**
     * Set to true to include data from the original Ticketing software.
     */
    remoteData?: boolean;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a AccountsGetResponse
 */
export function createAccountsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAccountsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAccountsGetResponse(accountsGetResponse: Partial<AccountsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoApiResponse(accountsGetResponse),
        "data": n => { accountsGetResponse.data = n.getObjectValue<UnifiedAccountOutput>(createUnifiedAccountOutputFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAccountsGetResponse(writer: SerializationWriter, accountsGetResponse: Partial<AccountsGetResponse> | undefined = {}) : void {
    serializeApiResponse(writer, accountsGetResponse)
    writer.writeObjectValue<UnifiedAccountOutput>("data", accountsGetResponse.data, serializeUnifiedAccountOutput);
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AccountsItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "remoteData": "remote_data",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AccountsItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAccountsGetResponseFromDiscriminatorValue,
        queryParametersMapper: AccountsItemRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Uri template for the request builder.
 */
export const AccountsItemRequestBuilderUriTemplate = "{+baseurl}/ticketing/accounts/{id}{?remote_data*}";
/* tslint:enable */
/* eslint-enable */
