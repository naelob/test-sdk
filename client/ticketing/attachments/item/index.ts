/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createUnifiedAttachmentOutputFromDiscriminatorValue, deserializeIntoApiResponse, serializeApiResponse, serializeUnifiedAttachmentOutput, type ApiResponse, type UnifiedAttachmentOutput } from '../../../models/';
import { DownloadRequestBuilderRequestsMetadata, DownloadRequestBuilderUriTemplate, type DownloadRequestBuilder } from './download/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttachmentsGetResponse extends ApiResponse, Parsable {
    /**
     * The data property
     */
    data?: UnifiedAttachmentOutput;
}
/**
 * Builds and executes requests for operations under /ticketing/attachments/{id}
 */
export interface AttachmentsItemRequestBuilder extends BaseRequestBuilder<AttachmentsItemRequestBuilder> {
    /**
     * The download property
     */
    get download(): DownloadRequestBuilder;
    /**
     * Retrieve a attachment from any connected Ticketing software
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of AttachmentsGetResponse
     */
     get(requestConfiguration?: RequestConfiguration<AttachmentsItemRequestBuilderGetQueryParameters> | undefined) : Promise<AttachmentsGetResponse | undefined>;
    /**
     * Retrieve a attachment from any connected Ticketing software
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AttachmentsItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Retrieve a attachment from any connected Ticketing software
 */
export interface AttachmentsItemRequestBuilderGetQueryParameters {
    /**
     * Set to true to include data from the original Ticketing software.
     */
    remoteData?: boolean;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a AttachmentsGetResponse
 */
export function createAttachmentsGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAttachmentsGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoAttachmentsGetResponse(attachmentsGetResponse: Partial<AttachmentsGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoApiResponse(attachmentsGetResponse),
        "data": n => { attachmentsGetResponse.data = n.getObjectValue<UnifiedAttachmentOutput>(createUnifiedAttachmentOutputFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAttachmentsGetResponse(writer: SerializationWriter, attachmentsGetResponse: Partial<AttachmentsGetResponse> | undefined = {}) : void {
    serializeApiResponse(writer, attachmentsGetResponse)
    writer.writeObjectValue<UnifiedAttachmentOutput>("data", attachmentsGetResponse.data, serializeUnifiedAttachmentOutput);
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AttachmentsItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "remoteData": "remote_data",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AttachmentsItemRequestBuilderNavigationMetadata: Record<Exclude<keyof AttachmentsItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    download: {
        uriTemplate: DownloadRequestBuilderUriTemplate,
        requestsMetadata: DownloadRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AttachmentsItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAttachmentsGetResponseFromDiscriminatorValue,
        queryParametersMapper: AttachmentsItemRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Uri template for the request builder.
 */
export const AttachmentsItemRequestBuilderUriTemplate = "{+baseurl}/ticketing/attachments/{id}{?remote_data*}";
/* tslint:enable */
/* eslint-enable */
